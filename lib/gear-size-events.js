// Generated by CoffeeScript 1.9.3
(function() {
  var $, Calculator, EventEmitter, GearSizeRenderer, GearSizeUI, Gearsize, e, util;

  util = require('util');

  EventEmitter = require('events'.EventEmitter);

  Gearsize = require('gear-size-calculator');

  GearSizeRenderer = require('./gear-size-renderer');

  $ = require('jquery')(window);

  Calculator = new Gearsize.Calculator;

  e = GearSizeUI.events = {
    showAll: 'show-all',
    showComparison: 'show-comparison',
    cassetteChanged: 'cassette-changed',
    rimDiameterChanged: 'rim-diameter-changed',
    tyreChanged: 'tyre-changed',
    chainRingsChanged: 'chain-rings-changed',
    error: 'error'
  };

  GearSizeUI = function(options) {
    this.loaded = false;
    this.gearSizes = {};
    this.rimDiameter = '';
    this.cassette = '';
    this.tyreSize = '';
    this.chainRings = '';
    EventEmitter.call(this, options);
  };

  util.inherits(GearSizeUI, events.EventEmitter);

  GearSizeUI = new GearSizeUI();

  GearSizeUI.on(e.showAll, function() {
    this.loaded = true;
    GearSizeRenderer.loadControlValues();
    return GearSizeRenderer.generateReferenceTable(this.gearSizes);
  });

  GearSizeUI.on(e.rimDiameterChanged, function() {
    return this.rimDiameter = $('#rim-diameter').val().parseInt(rimDiameter, 10);
  });

  GearSizeUI.on(e.cassetteChanged, function() {
    var sprocket;
    return this.cassette = (function() {
      var i, len, ref, results;
      ref = $('#cassette').val().split(',');
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        sprocket = ref[i];
        results.push(parseInt(sprocket, 10));
      }
      return results;
    })();
  });

  GearSizeUI.on(e.tyreChanged, function() {
    return this.tyreSize = $('#tyre-size').val().parseInt(tyreSize, 10);
  });

  GearSizeUI.on(e.chainRingsChanged, function() {
    var ring;
    return this.chainRings = (function() {
      var i, len, ref, results;
      ref = $('#chainring').val().split(',');
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        ring = ref[i];
        results.push(parseInt(ring, 10));
      }
      return results;
    })();
  });

  GearSizeUI.on(e.calculateGearSizes, function() {
    return this.gearSizes = Calculator.generateGearSizesInInches(this.chainRings, this.cassette, this.rimDiameter, this.tyreSize);
  });

  GearSizeUI.on(e.error, function(error) {
    return console.error('Error:', error);
  });

  module(exports(GearSizeUI));

}).call(this);
