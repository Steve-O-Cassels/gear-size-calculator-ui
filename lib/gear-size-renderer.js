// Generated by CoffeeScript 1.9.3
(function() {
  var $, GearSizeRenderer, Settings;

  Settings = require('./settings');

  $ = require('jquery')(window);

  GearSizeRenderer = {
    generateReferenceTable: function() {},
    loadControlValues: function() {
      renderDropDownOptions(Settings.cassettes, '#cassettes');
      renderDropDownOptions(Settings.rims, '#rim-diameters');
      renderDropDownOptions(Settings.tyres, '#tyre-sizes');
      return renderDropDownOptions(Settings.chainrings, '#chainrings');
    },
    renderDropDownOptions: function(items, dropDownId) {
      var i, results;
      i = 0;
      results = [];
      while (i < items.length) {
        results.push(jQuery('<option/>', {
          value: items[i],
          html: items[i]
        }).appendTo(dropDownId));
      }
      return results;
    },
    renderTable: function() {
      var clone, data, headingRow, i, sizeRow, template, x, y;
      template = $('#gear-size');
      i = 0;
      while (i < gearSizes.length) {
        data = gearSizes[i];
        if (i === 0) {
          clone = template.content.cloneNode(true);
          headingRow = clone.querySelectorAll('td');
          x = 0;
          while (x < data.length) {
            headingRow[x + 1].textContent = data[x].sprocket;
            x += 1;
          }
          template.parentNode.appendChild(clone);
        }
        clone = template.content.cloneNode(true);
        sizeRow = clone.querySelectorAll('td');
        sizeRow[0].textContent = data[0].chainRing;
        y = 0;
        while (y < data.length) {
          sizeRow[y + 1].textContent = data[y].gearSize;
          sizeRow[y + 1].title = data[y].toString();
          y += 1;
        }
        template.parentNode.appendChild(clone);
        i += 1;
      }
    }
  };

  GearSizeRenderer = (typeof exports !== "undefined" && exports !== null) && exports || (this.GearSizeRenderer = {});

}).call(this);
